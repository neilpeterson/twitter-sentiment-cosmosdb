trigger:
- master

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: 'twitter-app'


stages:

# - stage: test

#   jobs:
#   - job: tests
#     pool: Hosted Ubuntu 1604
#     continueOnError: false
#     timeoutInMinutes: 20

#     steps:

#     # Temp test, replace this with ARM TTK / Python Test Suite?
#     - task: PowerShell@2
#       displayName: Install Pester
#       inputs:
#         targetType: 'inline'
#         script: |
#           Find-Module pester | Install-Module -Force

- stage: build
  #dependsOn: test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - job: helm
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

      - task: AzureCLI@1
        displayName: 'AZ ACR Login'
        inputs:
          azureSubscription: 'azure-service-connection'
          scriptLocation: 'inlineScript'
          inlineScript: 'az acr login --name $(AZURE_CONTAINER_REGISTRY)'

      - task: HelmDeploy@0
        displayName: 'helm package (twitter-sentiment)'
        inputs:
          command: package
          chartPath: './deployment/helm-chart/twitter-sentiment'
          arguments: '--version $(Build.BuildId)'

      - task: AzureCLI@1
        displayName: 'AZ ACR helm push (twitter-sentiment)'
        inputs:
          azureSubscription: 'azure-service-connection'
          scriptLocation: inlineScript
          inlineScript: 'az acr helm push -n $(AZURE_CONTAINER_REGISTRY) /home/vsts/work/1/a/twitter-sentiment-$(Build.BuildId).tgz'

  - job: docker
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: AzureCLI@1
      displayName: 'AZ ACR Login'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptLocation: inlineScript
        inlineScript: 'az acr login --name $(AZURE_CONTAINER_REGISTRY)'

    - task: CmdLine@2
      displayName: 'docker build (chart-tweet)'
      inputs:
        script: |
          cd twitter-sentiment-apps/chart-tweet
          docker build -t $(AZURE_CONTAINER_REGISTRY_FQDN)/chart-tweet:$(Build.BuildId) .
    - task: CmdLine@2
      displayName: 'docker push (chart-tweet)'
      inputs:
        script: |
          docker push $(AZURE_CONTAINER_REGISTRY_FQDN)/chart-tweet:$(Build.BuildId)

    - task: CmdLine@2
      displayName: 'docker build (get-tweet)'
      inputs:
        script: |
          cd twitter-sentiment-apps/get-tweet
          docker build -t $(AZURE_CONTAINER_REGISTRY_FQDN)/get-tweet:$(Build.BuildId) .

    - task: CmdLine@2
      displayName: 'docker push (get-tweet)'
      inputs:
        script: |
          docker push $(AZURE_CONTAINER_REGISTRY_FQDN)/get-tweet:$(Build.BuildId)

    - task: CmdLine@2
      displayName: 'docker build (process-tweet)'
      inputs:
        script: |
          cd twitter-sentiment-apps/process-tweet
          docker build -t $(AZURE_CONTAINER_REGISTRY_FQDN)/process-tweet:$(Build.BuildId) .

    - task: CmdLine@2
      displayName: 'docker push (process-tweet)'
      inputs:
        script: |
          docker push $(AZURE_CONTAINER_REGISTRY_FQDN)/process-tweet:$(Build.BuildId)

- stage: app_pre_production
  dependsOn: build

  jobs:
  - job: deploy
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          AZURE_QUEUE_KEY=$(az storage account keys list --account-name $AZURE_STORAGE_ACCT --resource-group $AZURE_RESOURCE_GROUP --query [0].value -o tsv)
          echo "##vso[task.setvariable variable=AZURE_QUEUE_KEY]$AZURE_QUEUE_KEY"
          COSMOS_DB_ENDPOINT=$(az cosmosdb show --name $AZURE_COSMOS_DB --resource-group $AZURE_RESOURCE_GROUP --query documentEndpoint -o tsv)
          echo "##vso[task.setvariable variable=COSMOS_DB_ENDPOINT]$COSMOS_DB_ENDPOINT"
          COSMOS_DB_MASTERKEY=$(az cosmosdb list-keys --name $AZURE_COSMOS_DB --resource-group $AZURE_RESOURCE_GROUP --query primaryMasterKey -o tsv)
          echo "##vso[task.setvariable variable=COSMOS_DB_MASTERKEY]$COSMOS_DB_MASTERKEY"
          AZURE_ANALYTICS_ENDPOINT=$(az cognitiveservices account show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_ANALYTICS --query endpoint -o tsv)
          echo "##vso[task.setvariable variable=AZURE_ANALYTICS_ENDPOINT]$AZURE_ANALYTICS_ENDPOINT"
          AZURE_ANALYTICS_KEY=$(az cognitiveservices account keys list --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_ANALYTICS --query key1 -o tsv)
          echo "##vso[task.setvariable variable=AZURE_ANALYTICS_KEY]$AZURE_ANALYTICS_KEY"

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ls
          ls /deployment/helm-chart/twitter-sentiment/

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'azure-service-connection'
        azureResourceGroup: $(AZURE_RESOURCE_GROUP)
        kubernetesCluster: $(AZURE_KUBERNETES_SERVICE)
        useClusterAdmin: true
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '/deployment/helm-chart/twitter-sentiment/'
        releaseName: 'twitter-sentimentt-$(Build.BuildId)'
        overrideValues: 'TWITTER_CONSUMER_KEY=$(TWITTER_CONSUMER_KEY),TWITTER_CONSUMER_SECRET=$(TWITTER_CONSUMER_SECRET),TWITTER_ACCESS_TOKEN=$(TWITTER_ACCESS_TOKEN),TWITTER_ACCESS_TOKEN_SECRET=$(TWITTER_ACCESS_TOKEN_SECRET),TWITTER_TEXT=$(TWITTER_TEXT),AZURE_STORAGE_ACCT=$(AZURE_STORAGE_ACCT),AZURE_QUEUE=$(AZURE_QUEUE),AZURE_QUEUE_KEY=$(AZURE_QUEUE_KEY),AZURE_ANALYTICS_URI=$(AZURE_ANALYTICS_ENDPOINT),AZURE_ANALYTICS_KEY=$(AZURE_ANALYTICS_KEY),COSMOS_DB_ENDPOINT=(COSMOS_DB_ENDPOINT),COSMOS_DB_MASTERKEY=$(COSMOS_DB_MASTERKEY),COSMOS_DB_DATABASE=$(COSMOS_DB_DATABASE),COSMOS_DB_COLLECTION=(COSMOS_DB_COLLECTION)'