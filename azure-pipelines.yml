trigger:
- master

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:

  # Azure
  azureSubscription: azure-service-connection

  # Container Registry
  containerRegistryName: nepetersacr007
  containerRegistryFqdn: nepetersacr007.azurecr.io

stages:

# - stage: test

#   jobs:
#   - job: tests
#     pool: Hosted Ubuntu 1604
#     continueOnError: false
#     timeoutInMinutes: 20

#     steps:

#     # Temp test, replace this with ARM TTK / Python Test Suite?
#     - task: PowerShell@2
#       displayName: Install Pester
#       inputs:
#         targetType: 'inline'
#         script: |
#           Find-Module pester | Install-Module -Force

- stage: build
  # dependsOn: test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - job: helm
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

      - task: AzureCLI@1
        displayName: 'AZ ACR Login'
        inputs:
          azureSubscription: $(azureSubscription)
          scriptLocation: inlineScript
          inlineScript: 'az acr login --name $(containerRegistryName)'

      - task: HelmDeploy@0
        displayName: 'helm package (twitter-sentiment)'
        inputs:
          command: package
          chartPath: './deployment/helm-chart/twitter-sentiment'
          arguments: '--version $(Build.BuildId)'

      - task: AzureCLI@1
        displayName: 'AZ ACR helm push (twitter-sentiment)'
        inputs:
          azureSubscription: $(azureSubscription)
          scriptLocation: inlineScript
          inlineScript: 'az acr helm push -n $(containerRegistryName) /home/vsts/work/1/a/twitter-sentiment-$(Build.BuildId).tgz'

  - job: docker
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: AzureCLI@1
      displayName: 'AZ ACR Login'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr login --name $(containerRegistryName)'

    - task: CmdLine@2
      displayName: 'docker build (chart-tweet)'
      inputs:
        script: |
          cd twitter-sentiment-apps/chart-tweet
          docker build -t $(containerRegistryFqdn)/chart-tweet:$(Build.BuildId) .
    - task: CmdLine@2
      displayName: 'docker push (chart-tweet)'
      inputs:
        script: |
          docker push $(containerRegistryFqdn)/chart-tweet:$(Build.BuildId)

    # - task: CmdLine@2
    #   displayName: 'docker build (get-tweet)'
    #   inputs:
    #     script: |
    #       cd twitter-sentiment-apps/get-tweet
    #       docker build -t $(containerRegistryFqdn)/get-tweet:$(Build.BuildId) .

    # - task: CmdLine@2
    #   displayName: 'docker push (get-tweet)'
    #   inputs:
    #     script: |
    #       docker push $(containerRegistryFqdn)/get-tweet:$(Build.BuildId)

    - task: CmdLine@2
      displayName: 'docker build (process-tweet)'
      inputs:
        script: |
          cd twitter-sentiment-apps/process-tweet
          docker build -t $(containerRegistryFqdn)/process-tweet:$(Build.BuildId) .

    - task: CmdLine@2
      displayName: 'docker push (process-tweet)'
      inputs:
        script: |
          docker push $(containerRegistryFqdn)/process-tweet:$(Build.BuildId)

# - stage: infrastructure_pre_production
#   dependsOn: build

#   jobs:
#   - job: arm
#     pool: Hosted Ubuntu 1604
#     continueOnError: false

#     steps:

#     - task: AzureResourceManagerTemplateDeployment@3
#       inputs:
#         deploymentScope: 'Resource Group'
#         azureResourceManagerConnection: $(azureSubscription)
#         subscriptionId: '10a09851-d632-420e-ad20-2cd774fd4d41'
#         action: 'Create Or Update Resource Group'
#         resourceGroupName: 'twitter001'
#         location: 'East US'
#         templateLocation: 'Linked artifact'
#         csmFile: './deployment/arm/azuredeploy.json'
#         csmParametersFile: './deployment/arm/azuredeploy.parameters.json'
#         deploymentMode: 'Incremental'

# - stage: app_pre_production
#   dependsOn: infrastructure_pre_production

# - stage: infrastructure_pre_production
#   dependsOn: build

# - stage: app_pre_production
#   dependsOn: infrastructure_pre_production
