trigger:
- master

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:

  # Azure
  azureSubscription: azure-service-connection

  # Container Registry
  AZURE_CONTAINER_REGISTRY: nepetersacr008
  AZURE_CONTAINER_REGISTRY_FQDN: nepetersacr008.azurecr.io
  AZURE_MANAGED_IDENTITY_NAME: ninernep001

  AZURE_COG_SERVICES: ninernep002
  AZURE_KUBERNETES_SERVICE: ninernep003
  AZURE_STORAGE_ACCT: ninernep004
  AZURE_RESOURCE_GROUP: ninernep005
  AZURE_COSMOS_DB: ninernep006
  AZURE_ANALYTICS: ninernep007

stages:

# - stage: test

#   jobs:
#   - job: tests
#     pool: Hosted Ubuntu 1604
#     continueOnError: false
#     timeoutInMinutes: 20

#     steps:

#     # Temp test, replace this with ARM TTK / Python Test Suite?
#     - task: PowerShell@2
#       displayName: Install Pester
#       inputs:
#         targetType: 'inline'
#         script: |
#           Find-Module pester | Install-Module -Force

# - stage: build
#   dependsOn: test
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

#   jobs:
#   - job: helm
#     pool: Hosted Ubuntu 1604
#     continueOnError: false
#     timeoutInMinutes: 20

#     steps:

#       - task: AzureCLI@1
#         displayName: 'AZ ACR Login'
#         inputs:
#           azureSubscription: $(azureSubscription)
#           scriptLocation: inlineScript
#           inlineScript: 'az acr login --name $(AZURE_CONTAINER_REGISTRY)'

#       - task: HelmDeploy@0
#         displayName: 'helm package (twitter-sentiment)'
#         inputs:
#           command: package
#           chartPath: './deployment/helm-chart/twitter-sentiment'
#           arguments: '--version $(Build.BuildId)'

#       - task: AzureCLI@1
#         displayName: 'AZ ACR helm push (twitter-sentiment)'
#         inputs:
#           azureSubscription: $(azureSubscription)
#           scriptLocation: inlineScript
#           inlineScript: 'az acr helm push -n $(AZURE_CONTAINER_REGISTRY) /home/vsts/work/1/a/twitter-sentiment-$(Build.BuildId).tgz'

#   - job: docker
#     pool: Hosted Ubuntu 1604
#     continueOnError: false
#     timeoutInMinutes: 20

#     steps:

#     - task: AzureCLI@1
#       displayName: 'AZ ACR Login'
#       inputs:
#         azureSubscription: $(azureSubscription)
#         scriptLocation: inlineScript
#         inlineScript: 'az acr login --name $(AZURE_CONTAINER_REGISTRY)'

#     - task: CmdLine@2
#       displayName: 'docker build (chart-tweet)'
#       inputs:
#         script: |
#           cd twitter-sentiment-apps/chart-tweet
#           docker build -t $(AZURE_CONTAINER_REGISTRY_FQDN)/chart-tweet:$(Build.BuildId) .
#     - task: CmdLine@2
#       displayName: 'docker push (chart-tweet)'
#       inputs:
#         script: |
#           docker push $(AZURE_CONTAINER_REGISTRY_FQDN)/chart-tweet:$(Build.BuildId)

#     - task: CmdLine@2
#       displayName: 'docker build (get-tweet)'
#       inputs:
#         script: |
#           cd twitter-sentiment-apps/get-tweet
#           docker build -t $(AZURE_CONTAINER_REGISTRY_FQDN)/get-tweet:$(Build.BuildId) .

#     - task: CmdLine@2
#       displayName: 'docker push (get-tweet)'
#       inputs:
#         script: |
#           docker push $(AZURE_CONTAINER_REGISTRY_FQDN)/get-tweet:$(Build.BuildId)

#     - task: CmdLine@2
#       displayName: 'docker build (process-tweet)'
#       inputs:
#         script: |
#           cd twitter-sentiment-apps/process-tweet
#           docker build -t $(AZURE_CONTAINER_REGISTRY_FQDN)/process-tweet:$(Build.BuildId) .

#     - task: CmdLine@2
#       displayName: 'docker push (process-tweet)'
#       inputs:
#         script: |
#           docker push $(AZURE_CONTAINER_REGISTRY_FQDN)/process-tweet:$(Build.BuildId)

- stage: infrastructure_pre_production
  # dependsOn: build

  jobs:
  - job: arm
    pool: Hosted Ubuntu 1604
    continueOnError: false

    steps:

    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(azureSubscription)'
        subscriptionId: '10a09851-d632-420e-ad20-2cd774fd4d41'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(AZURE_RESOURCE_GROUP)'
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: './deployment/arm/azuredeploy.json'
        # csmParametersFile: './deployment/arm/azuredeploy.parameters.json'
        overrideParameters: '-aksName "$(AZURE_KUBERNETES_SERVICE)" -storageAccountName "$(AZURE_STORAGE_ACCT)" -cognitiveName "$(AZURE_COG_SERVICES)" -scriptIdentity "$(AZURE_MANAGED_IDENTITY_NAME)" -cosmosName "$(AZURE_COSMOS_DB)" -acrName "$(AZURE_CONTAINER_REGISTRY)"'
        deploymentMode: 'Incremental'

# - stage: app_pre_production
#   dependsOn: infrastructure_pre_production

#   jobs:
#   - job: deploy
#     pool: Hosted Ubuntu 1604
#     continueOnError: false
#     timeoutInMinutes: 20

#     steps:
#     - task: AzureCLI@2
#       inputs:
#         azureSubscription: 'azure-service-connection'
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           AZURE_QUEUE_KEY=$(az storage account keys list --account-name $AZURE_STORAGE_ACCT --resource-group $AZURE_RESOURCE_GROUP --query [0].value -o tsv)
#           echo "##vso[task.setvariable variable=AZURE_QUEUE_KEY;isOutput=true]$AZURE_QUEUE_KEY"
#           COSMOS_DB_ENDPOINT=$(az cosmosdb show --name $AZURE_COSMOS_DB --resource-group $AZURE_RESOURCE_GROUP --query documentEndpoint -o tsv)
#           echo "##vso[task.setvariable variable=COSMOS_DB_ENDPOINT;isOutput=true]$COSMOS_DB_ENDPOINT"
#           COSMOS_DB_MASTERKEY=$(az cosmosdb list-keys --name $AZURE_COSMOS_DB --resource-group $AZURE_RESOURCE_GROUP --query primaryMasterKey -o tsv)
#           echo "##vso[task.setvariable variable=COSMOS_DB_MASTERKEY;isOutput=true]$COSMOS_DB_MASTERKEY"
#           AZURE_ANALYTICS_ENDPOINT=$(az cognitiveservices account show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_ANALYTICS --query endpoint -o tsv)
#           echo "##vso[task.setvariable variable=AZURE_ANALYTICS_ENDPOINT;isOutput=true]$AZURE_ANALYTICS_ENDPOINT"
#           AZURE_ANALYTICS_KEY=$(az cognitiveservices account keys list --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_ANALYTICS --query key1 -o tsv)
#           echo "##vso[task.setvariable variable=AZURE_ANALYTICS_KEY;isOutput=true]$AZURE_ANALYTICS_KEY"

# - stage: infrastructure_production
#   dependsOn: build

# - stage: app_pre_production
#   dependsOn: infrastructure_pre_production
